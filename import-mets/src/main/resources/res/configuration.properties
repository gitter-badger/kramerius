# mac address for uuid generator
uuid.mac=00:1b:63:bd:97:ba

# connection to Kramerius 3 postgres db (replication source)
k3.db.driver=org.postgresql.Driver
k3.db.url=jdbc:postgresql://localhost:5432/kramerius
k3.db.user=kramerius
k3.db.password=f8TasR

# URL of Kramerius 3 (replication source)
k3.replication.url=http://localhost:8080/kramerius/

# replication institution (password is in the hash form)
k3.replication.sigla=ABA002
k3.replication.login=replication
k3.replication.password=f29fabe637a472bf5222b12a0bc5df77

# source directory for files for conversion and import (in Kramerius 3 format)
convert.directory=${sys:user.home}/.kramerius4/convert

# target directory for conversion
convert.target.directory=${sys:user.home}/.kramerius4/convert-converted

# source directory for files for direct import (in Kramerius 4 FOXML format)
import.directory=${sys:user.home}/.kramerius4/import




# working directory for repliaction and conversion
migration.directory=${sys:user.home}/.kramerius4/replication

#target directory for replication and conversion
migration.target.directory=${sys:user.home}/.kramerius4/replication-converted


# list of periodicasl IDs to replicate
migration.periodicals= ${sys:user.home}/.kramerius4/periodicals.txt

# list of monographs IDs to replicate
migration.monographs=${sys:user.home}/.kramerius4/monographs.txt

# controls if convertor K3->K4 should generate IMG_PREVIEW
convert.generatePreview=true

# size of the generated preview in pixels (maximum height or width)
convert.previewSize=700

# number of characters used as contractNumber in image file names (5 at NKP, 18 at KNAV)
contractNo.length=5

#convertor will create subfolder with contract name in the conversion target subfolder, the contents of the target directory is not deleted prior conversion batch
convert.useContractSubfolders=false

#used only when convert.useContractSubfolders=true. The convertor will copy the the original K3 xml file to the target subfolder
#and rename it to replication title ID (when called from Replicate process) or contract ID (when called from Convert process) with the .k3 extension
convert.copyOriginal=false

#convertor will use userCopy folder as the source for scanned images (if true) or masterCopy folder (if false)
convert.userCopy=true

# controls how convertor METS->K4 should embed binary streams ( encoded/referenced/external)
convert.files=encoded
# controls how convertor METS->K4 should embed preview streams ( encoded/referenced/external)
convert.previews=encoded
# controls how convertor METS->K4 should embed thumbnail streams ( encoded/referenced/external)
convert.thumbnails=encoded
# controls how convertor METS->K4 should embed txt (ocr and alto) streams ( encoded/referenced/external)
convert.txt=encoded
# controls how convertor METS->K4 should embed amd streams ( encoded/referenced/external)
convert.amd=encoded


# when true, images in FOXML files will be external references to IIP Image Server
convert.useImageServer=false

# base directory of the image server data. Image files will be copied to the subfolders of this directory, name of hte subfolder is the packageid of the imported PSP
convert.imageServerDirectory=${sys:user.home}/iip-data

# base URL of the tiles references from FOXML to imageserver. This base URL will be appended with packageid, image filename and convert.imageServerSuffix.tiles (see properties convert.imageServerSuffix...)
convert.imageServerTilesURLPrefix=http://localhost/fcgi-bin/iipsrv.fcgi?Zoomify=${convert.imageServerDirectory}

# base URL of the image references from FOXML to imageserver. This base URL will be appended with packageid, image filename and appropriate suffix (see properties convert.imageServerSuffix...)
convert.imageServerImagesURLPrefix=http://localhost/fcgi-bin/iipsrv.fcgi?FIF=${convert.imageServerDirectory}

# suffix of the image reference URL for full size images
convert.imageServerSuffix.big=&WID=999999&CVT=jpeg

# suffix of the image reference URL for thumbnail images
convert.imageServerSuffix.thumb=&HEI=128&CVT=jpeg

# suffix of the image reference URL for preview images
convert.imageServerSuffix.preview=&HEI=700&CVT=jpeg

# suffix of the image reference URL for zoomify/deepzoom tiles
convert.imageServerSuffix.tiles=

# optional base URL for external referenced datastreams. if not set, the file URL to convert.target.directory is used
convert.externalStreamsUrlPrefix=

#controls if original image should be converted to JPG (should be true if ALTO is used)
convert.originalToJPG=false

# if original K3 document references non-existing data file, conversion is terminated. If this property is set to true, only a warning is logged and conversion continues.
convert.ignoreMissingFiles=false

#default visibility of the imported documents
convert.defaultRights=false

#if true, RDF relations kramerius:hasPage are inserted before other types of RELS-EXT relations
convert.pagesFirst=true

#ingest and indexing phases of migration processes will be skipped
ingest.skip=false

#when true, automatically start indexer for all ingested top-level FOXML objects after import process finishes
ingest.startIndexer=true

#when true, automatically sort relations in merged RELS-EXT datastreams (after incremental import of document parts)
ingest.sortRelations=true

#when true, existing foxml objects with the same PID are replaced with the newly imported; when false, existing objects are preserved - only RELS-EXT RDF relations from the newly imported objects are added to the existing ones
ingest.updateExisting=false


# connection to fedora repository (replication target)
ingest.url=${fedoraHost}
ingest.user=${fedoraUser}
ingest.password=${fedoraPass}

# external configuration file name
_ext_configuration_file_name=migration.properties
